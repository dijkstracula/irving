#lang ivy1.8

module counter(t) = {
    individual val : t
    after init {
        val := 0
    }

    action up = {
        val := val + 1
    }

    action down = {
        val := val - 1
    }

    action is_zero returns(z : bool) = {
        z := (val = 0)
    }
}

type foo

instance c : counter(foo)

module po(t,lt) = {
    axiom lt(X:t,Y) & lt(Y,Z) -> lt(X,Z)
    axiom ~(lt(X:t,Y) & lt(Y,X))
}

object foo = {
    relation bit
    after init {
        this.bit := false
    }
    action flip = {
        this.bit := ~bit
    }
}

object num = {
    type this
    action plus(x:this,y:this) returns (z:this) = {
        z := x + y;
    }
}

module counter_prop(c) = {

    relation was_up
    after init {
        was_up := false
    }

    after c.up {
        was_up := true
    }

    after c.down {
        was_up := false
    }

    after c.is_zero returns (z:bool) {
        ensure was_up -> ~z
    }
}