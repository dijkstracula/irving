// Grammar for first-order logic rules.

LOGICTOK = @{ !reserved ~ ASCII_ALPHA_UPPER ~ ("_" | ASCII_ALPHANUMERIC)* }

// aka simplevar in ivy_logic_utils
// TODO: The sort ought to be an ident, I think
// https://github.com/dijkstracula/irving/issues/27
logicsym         = { LOGICTOK ~ (":" ~ PROGTOK)? }

fmla             =  { 
    exists | forall | log_term
}

exists           =  { EXISTS ~ logicsym ~ ("," ~ logicsym)* ~ "." ~ fmla }
forall           =  { FORALL ~ logicsym ~ ("," ~ logicsym)* ~ "." ~ fmla }

log_subscr      =  { PROGTOK ~ ("." ~ PROGTOK)* }

log_term        =  { log_atom ~ (log_infix_op ~ log_atom)* }
// This feels like a slightly goofy way to compose quantified formulae - is there a better one?
log_atom        = _{ log_prefix_op? ~ (forall | exists | (log_primary ~ log_postfix_op?)) }
    log_prefix_op   = _{ UMINUS | NOT }
    log_infix_op    = _{ IFF | ARROW |
                     PLUS | MINUS | TIMES | DIV |
                     LE | LT | GE | GT | EQ | NEQ |
                     AND | OR | DOT }
    log_postfix_op  = _{ index | log_app_args }
log_primary    = _{ boollit | logicsym | number | PROGTOK | "(" ~ fmla ~ ")" }

// relations are assignable either all with expressions as arguments (e.g. r(x,
// 0) for some bound variable `x`) or with a logical variable which acts as a
// placeholder (e.g.  r(X, 0) for some free `X`).
// TODO: "relation_lval" isn't a great name, something like "logical_relation_read"
// sucks but it's more descriptive.

// XXX: This warrants an explanation relation_lval should morally be an (expr ~ log_app_args),
// but if we do that then the expression parser will consume the function application parens
// and arguments.  We can't have that because parsing out a logical expression in the arguments
// would fail.  So we simplify the grammar here, which is unfortunate and may bite us later.
relation_rval  = { logicsym ~ ( DOT ~ logicsym)* }

relation_lval   = { relation_rval ~ log_app_args }
log_app_args    = { "(" ~ (log_term ~ ("," ~ log_term)*)? ~ ")" }

// An lparam is a logicsym with an optional type annotation.  These are for
// things like relation declaration lists.
lparamlist = { logicsym ~ ("," ~ logicsym)* }