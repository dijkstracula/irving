COMMENT = _{ !SOI ~ "#" ~ !"lang " ~ (!"\n" ~ ANY)* }

// A param is a token with an optional type annotation.  These are for things
// like function argument lists.
param = { symbol ~ ( ":" ~ ident)? }
paramlist = { param ~ ("," ~ param)* }

// Expressions

// https://pest.rs/book/precedence.html
rval            =  { atom ~ (infix_op ~ atom)* }
atom            = _{ prefix_op? ~ primary ~ postfix_op? }
    prefix_op   = _{ UMINUS | NOT }
    infix_op    = _{ PLUS | MINUS | TIMES | DIV |
                     LT | LE | GT | GE | EQ | NEQ |
                     AND | OR | DOT }
    postfix_op  = _{ fnapp_args | index }
primary         = _{ THIS | symbol | number | boollit | "(" ~ rval ~ ")" }

fnapp_args = { "(" ~ (rval ~ ("," ~ rval)* )? ~ ")" }
//TODO: only one dimension of indexing, right?
index      = { "[" ~ rval ~ "]" }

// Types

bv_decl = { BV ~ "[" ~ number ~ "]" }
enum_decl  = { "{" ~ symbol ~ ("," ~ symbol)* ~ "}" }
range_decl = { "{" ~ rval ~ ".." ~ rval ~ "}" }

builtin_type = { bv_decl | enum_decl | range_decl | THIS }

// Decls

decl_ret   = { "returns" ~ "(" ~ param ~ ")" } //TODO: needs to be a paramlist
decl_sig =  { symbol ~ ("(" ~ paramlist ~ ")")? }
decl_block = { "{" ~ (decl ~ ";"?)* ~ "}" }

mod_sig = { symbol ~ ( "(" ~ symbol ~ ("," ~ symbol)? ~ ")")? }

include_decl      = { INCLUDE ~ symbol }
var_decl          = { VAR ~ param }

attribute_decl    = { ATTRIBUTE ~ rval } // TODO: wildly overspecified: shoudl be constrained beyond just an expr.

alias_decl        = { ALIAS ~ symbol ~ "=" ~ builtin_type }
axiom_decl        = { AXIOM ~ fmla }

function_decl     = { FUNCTION ~ decl_sig ~ ":" ~ symbol }
relation_decl     = { RELATION ~ decl_sig }

global_decl       = { GLOBAL ~ decl_block }
process_decl      = { PROCESS ~ decl_sig ~ "=" ~ decl_block }
object_decl       = { OBJECT ~ symbol ~ "=" ~ decl_block }

import_decl       = { IMPORT ~ ACTION ~ decl_sig }
export_decl       = { EXPORT ~ (symbol | action_decl) }

module_decl       = { MODULE ~ mod_sig ~ "=" ~ decl_block }

instance_decl     = { INSTANCE ~ symbol ~ ":" ~ mixin_sig }

implementation_decl    = { IMPLEMENTATION ~ decl_block }
specification_decl     = { SPECIFICATION ~ decl_block }
common_decl            = { COMMON ~ decl_block }

// TODO: struct decl
//type_name         = { symbol | THIS }
type_decl         = { TYPE ~ (THIS | (symbol ~ (("=" ~ builtin_type) | ("of" ~ symbol))?)) } // superclass might have to be more than a symbol

invariant_decl    = { INVARIANT ~ fmla }

// TODO: not sure exactly about these ones yet.
header_decl       = { HEADER ~ symbol }
interpret_decl    = { INTERPRET ~ symbol ~ ("->" ~ ident)? }
instantiate_decl  = { INSTANTIATE ~ symbol }
autoinstance_decl = { AUTOINSTANCE ~ decl_sig }

decl = {
      action_decl
    
    | implementation_decl
    | specification_decl
    | common_decl
    | global_decl

    | alias_decl
    | attribute_decl
    | axiom_decl
    | function_decl
    | relation_decl
    | include_decl
    | var_decl
    | header_decl
    | implement_action_decl
    | instance_decl
    | interpret_decl
    | invariant_decl
    | instantiate_decl
    | module_decl
    | object_decl
    | process_decl
    | instance_decl
    | autoinstance_decl
    | import_decl
    | export_decl
    | after_decl
    | before_decl
    | type_decl

    | (stmt ~ (";" ~ stmt)* )
}

// Actions and mixins
action_decl       = { ACTION ~ decl_sig ~ decl_ret? ~ ("=" ~ stmt_block)? }
after_decl        = { AFTER  ~ (mixin_sig ~ decl_ret?)? ~ stmt_block }
before_decl       = { BEFORE ~ (mixin_sig ~ decl_ret?)? ~ stmt_block }
implement_action_decl    = { IMPLEMENT ~ mixin_sig ~ decl_ret? ~ stmt_block }

// NB: Because a mixin signature can refer to an action outside the current scope, the sig
// name needs to be a qualified identifier and not just a symbol token.
mixin_sig =  { ident ~ ("(" ~ paramlist ~ ")")? }

assign_action = { (var_decl | rval) ~ ":=" ~ rval} //TODO
assert_action = { ASSERT ~ rval}
assume_action = { ASSUME ~ rval}
call_action =   { rval }
ensure_action = { ENSURE ~ fmla }
requires_action = { REQUIRE ~ fmla }

action = {
      assign_action
    | assert_action
    | assume_action
    | call_action
    | ensure_action
    | requires_action
}

actions = { action ~ (";" ~ action)* }

// Statements

stmt_block = { "{" ~ (stmt ~ ";"?)* ~ "}" }

return_stmt = { "return" ~ rval }
if_stmt     = { "if"    ~ rval ~ stmt_block ~ ("else" ~ stmt_block)? }
while_stmt  = { "while" ~ rval ~ stmt_block }

stmt = {
      actions
    | if_stmt
    | return_stmt
    | while_stmt
    | var_decl // or something??  Feels weird to mix a decl into a stmt like this.
}

// Toplevels 
hashlang    = _{ SOI ~ "#lang" ~ langver }
    langver = ${ "ivy" ~ number ~ ("." ~ number)? }

prog = {
      hashlang
    ~ decl*
    ~ EOI
}
