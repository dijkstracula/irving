COMMENT = _{ !SOI ~ "#" ~ !"lang " ~ (!"\n" ~ ANY)* }

// A param is a token with an optional type annotation.  These are for things
// like function argument lists.
param = { symbol ~ ( ":" ~ ident)? }
paramlist = { param ~ ("," ~ param)* }

// Expressions

// https://pest.rs/book/precedence.html
expr            =  { atom ~ (infix_op ~ atom)* }
atom            = _{ prefix_op? ~ primary ~ postfix_op? }
    prefix_op   = _{ UMINUS | NOT }
    infix_op    = _{ PLUS | MINUS | TIMES | DIV |
                     LT | LE | GT | GE | EQ | NEQ |
                     AND | OR | DOT }
    postfix_op  = _{ fnapp_args | index }
primary         = _{ term | number | boollit | "(" ~ expr ~ ")" }

//TODO: contemplate renamining this as just "fnapp"?
fnapp_args = { "(" ~ (expr ~ ("," ~ expr)* )? ~ ")" }
//TODO: only one dimension of indexing, right?
index      = { "[" ~ expr ~ "]" }

// Types

enum_decl  = { "{" ~ symbol ~ ("," ~ symbol)* ~ "}" }
range_decl = { "{" ~ expr ~ ".." ~ expr ~ "}" }

// Decls

decl_ret   = { "returns" ~ "(" ~ param ~ ")" } //TODO: needs to be a paramlist
decl_sig =  { ident ~ ("(" ~ paramlist ~ ")")? }
decl_block = { "{" ~ decl* ~ ";"? ~ "}" }

include_decl      = { INCLUDE ~ symbol }
var_decl          = { VAR ~ term }

after_decl        = { AFTER  ~ (decl_sig ~ decl_ret?)? ~ stmt_block }
before_decl       = { BEFORE ~ (decl_sig ~ decl_ret?)? ~ stmt_block }

alias_decl        = { ALIAS ~ symbol ~ "=" ~ expr }
axiom_decl        = { AXIOM ~ fmla }

function_decl     = { FUNCTION ~ decl_sig ~ ":" ~ symbol }
relation_decl     = { RELATION ~ decl_sig }

global_decl       = { GLOBAL ~ decl_block }
module_decl       = { MODULE ~ decl_sig ~ "=" ~ decl_block }
object_decl       = { OBJECT ~ decl_sig ~ "=" ~ decl_block }
extract_decl      = { EXTRACT ~ decl_sig ~ "=" ~ decl_block }

action_decl       = { ACTION ~ decl_sig ~ decl_ret? ~ ("=" ~ stmt_block)? }
import_decl       = { IMPORT ~ ACTION ~ decl_sig }
export_decl       = { EXPORT ~ (ident | action_decl) }
implement_decl    = { IMPLEMENT ~ decl_sig ~ decl_ret? ~ stmt_block }

instance_decl     = { INSTANCE ~ ident ~ ":" ~ decl_sig }

// TODO: struct decl
type_name         = { symbol | THIS }
type_decl         = { TYPE ~ type_name ~ (("=" ~ (range_decl | enum_decl)) | ("of" ~ symbol))? } // superclass might have to be more than a symbol

invariant_decl    = { INVARIANT ~ fmla }

// TODO: not sure exactly about these ones yet.
header_decl       = { HEADER ~ symbol }
interpret_decl    = { INTERPRET ~ symbol }
instantiate_decl  = { INSTANTIATE ~ symbol }
autoinstance_decl = { AUTOINSTANCE ~ decl_sig }

decl = {
      action_decl
    | alias_decl
    | axiom_decl
    | function_decl
    | relation_decl
    | include_decl
    | var_decl
    | header_decl
    | global_decl
    | implement_decl
    | instance_decl
    | interpret_decl
    | invariant_decl
    | module_decl
    | instantiate_decl
    | object_decl
    | instance_decl
    | autoinstance_decl
    | import_decl
    | export_decl
    | after_decl
    | before_decl
    | extract_decl
    | type_decl
    | (stmt ~ (";" ~ stmt)* )
}

// Actions

assign_action = { (var_decl | expr) ~ ":=" ~ expr} //TODO
assert_action = { ASSERT ~ expr}
assume_action = { ASSUME ~ expr}
call_action =   { expr }
ensure_action = { ENSURE ~ fmla }
requires_action = { REQUIRE ~ fmla }

action = {
      assign_action
    | assert_action
    | assume_action
    | call_action
    | ensure_action
    | requires_action
}

actions = { action ~ (";" ~ action)* }

// Statements

stmt_block = { "{" ~ stmt* ~ ";"? ~ "}" }

return_stmt = { "return" ~ expr}
if_stmt     = { "if"    ~ expr ~ stmt_block ~ ("else" ~ stmt_block)? }
while_stmt  = { "while" ~ expr ~ stmt_block }

stmt = {
      actions
    | if_stmt
    | return_stmt
    | while_stmt
    | var_decl // or something??  Feels weird to mix a decl into a stmt like this.
}

// Toplevels 
hashlang    = _{ SOI ~ "#lang" ~ langver }
    langver = ${ "ivy" ~ number ~ ("." ~ number)? }

prog = {
      hashlang
    ~ decl*
    ~ EOI
}
