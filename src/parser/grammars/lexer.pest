// From ivy/ivy_lexer.py
ISA         = { "isa" }
LPAREN      = { "(" }
RPAREN      = { ")" }
PLUS        = { "+" }
MINUS       = { "-" }
UMINUS      = { "-" }
TIMES       = { "*" }
DIV         = { "/" }
NOT         = { "~" }
AND         = { "&" }
OR          = { "|" }
EQ          = { "=" }
NEQ         = { "~=" }
SEMI        = { ";" }
ASSIGN      = { ":=" }
DOT         = { "." }
LCB = { "{" }
RCB = { "}" }
ARROW = { "->" }
IFF = { "<->" }
COLON = { ":" }
DOTS = { ".." }
DOTDOTDOT = { "..." }
DOLLAR = { "$" }
CARET = { "^" }
LB = { "[" }
RB = { "]" }
LT = { "<" }
LE = { "<=" }
GT = { ">" }
GE = { ">=" }
EXISTS = _{ "exists" }
FORALL = _{ "forall" }
THIS   = { "this" }

WHITESPACE = _{ " " | "\t" | "\r" | NEWLINE }

nativechar = { !">>>" ~ ANY }
NATIVEQUOTE = { "<<<" ~ nativechar* ~ ">>>" }

number = @{ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) }

// Declaration kinds: from ivy2/ivylang.ivy's `decl.parse()`.
// Also from ivy/ivy_lexer.py.

ACTION          = _{ "action"    }
ALIAS           = _{ "alias"     }
ASSERT          = _{ "assert"    }
ASSUME          = _{ "assume"    }
ATTRIBUTE       = _{ "attribute" }
ENSURE          = _{ "ensure"    }
REQUIRE         = _{ "require"   }
AXIOM           = _{ "axiom" | "property" }
BV              = _{ "bv" | "uint" /* | "strbv" | "intbv" | "uint"*/ }
CLASS           = _{ "class"     }
SUBCLASS        = _{ "subclass"  }
FIELD           = _{ "field"     }
FUNCTION        = _{ "function"  }
RELATION        = _{ "relation"  }
INCLUDE         = _{ "include "  }
VAR             = _{ "individual" | "var" }
GLOBAL          = _{ "global"    }
IMPLEMENTATION  = _{ "implementation" }
SPECIFICATION   = _{ "specification"  }
COMMON          = _{ "common"    }
HEADER          = _{ "header"    }
IMPLEMENT       = _{ "implement" }
INTERPRET       = _{ "interpret" }
INVARIANT       = _{ "invariant" }
INSTANTIATE     = _{ "instantiate" }
INSTANCE        = _{ "instance"  }
MODULE          = _{ "module "   }
OBJECT          = _{ "object"    }
OF              = _{ "of"       }
AUTOINSTANCE    = _{ "autoinstance" }
IMPORT          = _{ "import"    }
EXPORT          = _{ "export"    }
INIT            = _{ "init"      }
AFTER           = _{ "after"     }
BEFORE          = _{ "before"    }
TYPE            = _{ "type"      }

IF =     _{ "if" }
ELSE =   _{ "else" }
WHILE =  _{ "while" }
RETURN = _{" return "}

// The semantics of these are slightly different in real-Ivy but I'm
// somewhat sure that for our purposes they're equivalent, at least right
// now.  
PROCESS      = _{ "extract" | "process" | "isolate" }

boollit = { "true" | "false" }

reserved = {
  ACTION
| ALIAS
| ASSERT
| ASSUME
| ATTRIBUTE
| BV
| CLASS
| SUBCLASS
| ENSURE
| REQUIRE
| AXIOM
| FIELD
| FUNCTION
| RELATION
| INCLUDE
| VAR
| GLOBAL
| IMPLEMENTATION
| SPECIFICATION
| COMMON
| HEADER
| IMPLEMENT
| INTERPRET
| INVARIANT
| INSTANTIATE
| MODULE
| OBJECT
| PROCESS
| INSTANCE
| AUTOINSTANCE
| IMPORT
| EXPORT
/* | INIT */
| AFTER
| TYPE
| IF
| ELSE
| WHILE
| RETURN
| BEFORE
| boollit
| EXISTS
| FORALL
| THIS
}

// Double quotes in a program token?  Technically Ivy insists that they
// completely wrap the token, but, I still remain fully goblinized
PROGTOK   = @{ !reserved ~ (ASCII_ALPHA_LOWER ~ ("_" | "\"" | ASCII_ALPHANUMERIC)*) }

// An identifier is a program variable, possibly qualified with a module
// prefix.
ident = { THIS | (PROGTOK ~ ("." ~ PROGTOK)*) }
