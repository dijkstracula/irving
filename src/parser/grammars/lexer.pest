// From ivy/ivy_lexer.py
COMMA       = { "," }
ISA         = { "isa" }
LPAREN      = { "(" }
RPAREN      = { ")" }
PLUS        = { "+" }
MINUS       = { "-" }
UMINUS      = { "-" }
TIMES       = { "*" }
DIV         = { "/" }
NOT         = { "~" }
AND         = { "&" }
OR          = { "|" }
EQ          = { "=" }
NEQ         = { "~=" }
SEMI        = { ";" }
ASSIGN      = { ":=" }
DOT         = { "." }
LCB = { "{" }
RCB = { "}" }
ARROW = { "->" }
IFF = { "<->" }
COLON = { ":" }
DOTS = { ".." }
DOTDOTDOT = { "..." }
DOLLAR = { "$" }
CARET = { "^" }
LB = { "[" }
RB = { "]" }
LT = { "<" }
LE = { "<=" }
GT = { ">" }
GE = { ">=" }
EXISTS = _{ "exists" }
FORALL = _{ "forall" }
THIS   = { "this" }

WHITESPACE = _{ " " | "\t" | "\r" | NEWLINE }

nativechar = { !">>>" ~ ANY }
NATIVEQUOTE = { "<<<" ~ nativechar* ~ ">>>" }

number = @{ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) }

// Declaration kinds: from ivy2/ivylang.ivy's `decl.parse()`.
// Also from ivy/ivy_lexer.py.

ACTION       = _{ "action"    }
ALIAS        = _{ "alias"     }
ASSERT       = _{ "assert"    }
ASSUME       = _{ "assume"    }
ENSURE       = _{ "ensure"    }
REQUIRE      = _{ "require"   }
AXIOM        = _{ "axiom"     }
FUNCTION     = _{ "function"  }
RELATION     = _{ "relation"  }
INCLUDE      = _{ "include "  }
VAR          = _{ "individual" | "var" }
GLOBAL       = _{ "global"    }
HEADER       = _{ "header"    }
IMPLEMENT    = _{ "implement" }
INTERPRET    = _{ "interpret" }
INVARIANT    = _{ "invariant" }
MODULE       = _{ "module"    }
INSTANTIATE  = _{ "instantiate" }
OBJECT       = _{ "object"   }
INSTANCE     = _{ "instance" }
AUTOINSTANCE = _{ "autoinstance" }
IMPORT       = _{ "import" }
EXPORT       = _{ "export" }
INIT         = _{ "init"   }
AFTER        = _{ "after"  }
TYPE         = _{ "type"   }

IF =     _{ "if" }
WHILE =  _{ "while" }
RETURN = _{" return "}

// These are not explicitly in ivy2's `decl.parse()` but I don't know how we
// avoid having them
BEFORE       = _{ "before" }
EXTRACT      = _{ "extract" | "process" }

boollit = { "true" | "false" }

reserved = {
  ACTION
| ALIAS
| ASSERT
| ASSUME
| ENSURE
| REQUIRE
| AXIOM
| FUNCTION
| RELATION
| INCLUDE
| VAR
| GLOBAL
| HEADER
| IMPLEMENT
| INTERPRET
| INVARIANT
| MODULE
| INSTANTIATE
| OBJECT
| INSTANCE
| AUTOINSTANCE
| IMPORT
| EXPORT
/* | INIT */
| AFTER
| TYPE
| IF
| WHILE
| RETURN
| BEFORE
| EXTRACT
| boollit
| EXISTS
| FORALL
| THIS
}

symbol   = @{ !reserved ~ ASCII_ALPHA       ~ ("_" | ASCII_ALPHANUMERIC)* }

// An identifier is a program variable, possibly qualified with a module
// prefix.
ident = { THIS | (symbol ~ ("." ~ symbol)*) }

// A term is a fully-qualified identifier with an optional type annotation.
term = { ident ~ ( ":" ~ ident)? }
termlist = { term ~ ("," ~ term)* }
