#lang ivy1.8

# TODO: This is where unbounded_sequence actually lives.  Should
# we pull it out of the grammar?

module unbounded_sequence = {
    type t
    alias t = this

    # returns the least key greater than x
    action next(x:this) returns (y:this)

    # returns the greatest key less than x
    action prev(x:this) returns (y:this)

}

# TODO: for us, an iterable is also a range.  Same thing?

module iterable = {
    type t = {0..4}
    var curr : t

    after init {
        curr := 0;
    }

    implementation {
        action next(x:this) returns (y:t) = {
            y := curr + 1; 
        }
        action prev(x:this) returns (y:t) = {
            y := curr - 1;
        }
        action is_max(x:this) returns (r:bool) = {
            r := (curr = 4); 
        }
    }
}

module sequence_iterator(range) = {
    type t

    # XXX: should be range.t
    action create(x:iterable.t) returns (y:t)
    action begin returns (y:t)
    action end returns (y:t)
    action value returns (y: range)
}

