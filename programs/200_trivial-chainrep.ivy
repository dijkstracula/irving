#lang ivy1.8

#@include numbers
include collections
include network

global {
    # Some global resources

    alias byte = bv[8]
    instance file : vector(byte)

    type pid = {0..2}
    instance net : tcp.net(byte)

}


process host(self:pid) = {

    export action append(val:byte)
    import action show(content:file)
    
    instance sock : net.socket
    var contents : file

    after init {
        contents := file.empty;
    }
   
    # Implement the client 'append' request

    implement append {
        # All append events are forwarded to the primary, even if the append
        # happens to take place on the primary.  (We could have avoided this
        # redundant sent by special-casing the behaviour for the primary here,
        # but that seems like that's mixing test logic and business logic?)
        sock.send(host(0).sock.id, val);
    }
    
    implement sock.recv(src:tcp.endpoint,val:byte) {
        # Propagate the value down the chain.
        contents := contents.append(val);
        if (self < 2) {
            sock.send(host(self+1).sock.id, val);
        }
        show(contents);
    }

    specification {

        var msg_count : nat

        after init {
            msg_count := 0;
        }

        after sock.send(dst:tcp.endpoint, val:byte) {
            msg_count := msg_count + 1;
        }

        after sock.recv(dst:tcp.endpoint, val:byte) {
            msg_count := msg_count - 1;

            ensure forall P1:pid, P2:pid. msg_count = 0 -> 
                host(P1).contents.end() = host(P2).contents.end() & 
                forall I . I < host(P1).contents.end() -> (host(P1).contents.get(I) = host(P2).contents.get(I));
        }
    }
}
