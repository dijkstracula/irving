#lang ivy1.8

global {
    alias byte = bv[8]
    instance file : vector(byte)
    type pid = {0..1}
    instance net: tcp.net(byte)
}

process host(self:pid) = {
    export action append(val: byte)
    import action show(content: file)
    instance sock : net.socket
    var contents: file

    after init {
        contents := file.empty;
    }

    implement append {
        contents := contents.append(val);
	# FIXME sock.send(host(0).sock.id, val);
        show(contents);
    }

    implement sock.recv(src: tcp.endpoint, val:byte) {
        contents := contents.append(val);
        show(contents);
    }
}

specification {
    var msg_count : unbounded_sequence

    after init {
        msg_count := 0
    }

    after host.sock.send(self: pid, dst: tcp.endpoint, val: byte) {
        msg_count := msg_count + 1;
    }

    after host.sock.recv(self: pid, src: tcp.endpoint, val: byte) {
        msg_count := msg_count - 1;
        ensure msg_count = 0 -> host(0).contents.eq(host(1).contents); # TODO: PARSEME
    }
}
