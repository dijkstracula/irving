#lang ivy1.8

include network
include collections

global {
    alias byte = bv[8]
    instance file : vector(byte)
    type pid = {0..1}
    instance net: tcp.net(byte)
}

process host(self:pid) = {
    import action show(content: file)
    instance sock : net.socket
    var contents: file

    export action append(val: byte) = {
        contents := contents.append(val);
        sock.send(host(1-self).sock.id, val);
        show(contents);
    }

    after init {
        contents := file.empty();
    }

    implement sock.recv(src: tcp.endpoint, val:byte) {
        contents := contents.append(val);
        show(contents);
    }

    specification {
        var msg_count : nat

        after init {
            msg_count := 0
        }

        after sock.send(dst: tcp.endpoint, val: byte) {
            msg_count := msg_count + 1;
        }

        after sock.recv(src: tcp.endpoint, val: byte) {
            msg_count := msg_count - 1;
            ensure host(0).contents = (host(1).contents);
        }
    }
}

#axiom host(0).sock.id ~= host(1).sock.id

#attribute method=bmc[10] # TODO: PARSEME
